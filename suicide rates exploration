{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6196316,"sourceType":"datasetVersion","datasetId":3557057}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/khadijabibi98/suicide-exploration?scriptVersionId=172752895\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom scipy.stats import chi2_contingency\nfrom patsy import dmatrices\nimport statsmodels.api as sm\nprint(\"Setup Complete\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-18T20:51:23.815631Z","iopub.execute_input":"2024-04-18T20:51:23.81603Z","iopub.status.idle":"2024-04-18T20:51:23.825527Z","shell.execute_reply.started":"2024-04-18T20:51:23.816001Z","shell.execute_reply":"2024-04-18T20:51:23.824618Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Setup Complete\n","output_type":"stream"}]},{"cell_type":"code","source":"# Specify the path of the CSV file to read\nmy_filepath = \"../input/suicide-cases-in-india/Suicides_in_India.csv\"","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:51:34.262154Z","iopub.execute_input":"2024-04-18T20:51:34.262744Z","iopub.status.idle":"2024-04-18T20:51:34.266723Z","shell.execute_reply.started":"2024-04-18T20:51:34.262714Z","shell.execute_reply":"2024-04-18T20:51:34.265612Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# Read the file into a variable my_data\nsuicide_data = pd.read_csv(my_filepath, index_col=\"Year\", parse_dates=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Examine the dataset\nsuicide_data","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:51:37.552625Z","iopub.execute_input":"2024-04-18T20:51:37.552988Z","iopub.status.idle":"2024-04-18T20:51:37.568057Z","shell.execute_reply.started":"2024-04-18T20:51:37.552959Z","shell.execute_reply":"2024-04-18T20:51:37.566722Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"                    State             Type_code  \\\nYear                                              \n2001-01-01  A & N ISLANDS                Causes   \n2001-01-01  A & N ISLANDS                Causes   \n2001-01-01  A & N ISLANDS                Causes   \n2001-01-01  A & N ISLANDS                Causes   \n2001-01-01  A & N ISLANDS                Causes   \n...                   ...                   ...   \n2012-01-01    WEST BENGAL  Professional_Profile   \n2012-01-01    WEST BENGAL  Professional_Profile   \n2012-01-01    WEST BENGAL  Professional_Profile   \n2012-01-01    WEST BENGAL  Professional_Profile   \n2012-01-01    WEST BENGAL         Social_Status   \n\n                                           Type  Gender Age_group  \nYear                                                               \n2001-01-01                               Cancer    Male     15-29  \n2001-01-01                              Divorce    Male       60+  \n2001-01-01                        Dowry Dispute  Female       60+  \n2001-01-01  Ideological Causes/Hero Worshipping  Female       60+  \n2001-01-01                   Illness (Aids/STD)  Female      0-14  \n...                                         ...     ...       ...  \n2012-01-01                Professional Activity    Male       60+  \n2012-01-01    Self-employed (Business activity)    Male      0-14  \n2012-01-01                 Service (Government)    Male     15-29  \n2012-01-01                 Service (Government)    Male       60+  \n2012-01-01                        Never Married    Male    0-100+  \n\n[237519 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>State</th>\n      <th>Type_code</th>\n      <th>Type</th>\n      <th>Gender</th>\n      <th>Age_group</th>\n    </tr>\n    <tr>\n      <th>Year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2001-01-01</th>\n      <td>A &amp; N ISLANDS</td>\n      <td>Causes</td>\n      <td>Cancer</td>\n      <td>Male</td>\n      <td>15-29</td>\n    </tr>\n    <tr>\n      <th>2001-01-01</th>\n      <td>A &amp; N ISLANDS</td>\n      <td>Causes</td>\n      <td>Divorce</td>\n      <td>Male</td>\n      <td>60+</td>\n    </tr>\n    <tr>\n      <th>2001-01-01</th>\n      <td>A &amp; N ISLANDS</td>\n      <td>Causes</td>\n      <td>Dowry Dispute</td>\n      <td>Female</td>\n      <td>60+</td>\n    </tr>\n    <tr>\n      <th>2001-01-01</th>\n      <td>A &amp; N ISLANDS</td>\n      <td>Causes</td>\n      <td>Ideological Causes/Hero Worshipping</td>\n      <td>Female</td>\n      <td>60+</td>\n    </tr>\n    <tr>\n      <th>2001-01-01</th>\n      <td>A &amp; N ISLANDS</td>\n      <td>Causes</td>\n      <td>Illness (Aids/STD)</td>\n      <td>Female</td>\n      <td>0-14</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2012-01-01</th>\n      <td>WEST BENGAL</td>\n      <td>Professional_Profile</td>\n      <td>Professional Activity</td>\n      <td>Male</td>\n      <td>60+</td>\n    </tr>\n    <tr>\n      <th>2012-01-01</th>\n      <td>WEST BENGAL</td>\n      <td>Professional_Profile</td>\n      <td>Self-employed (Business activity)</td>\n      <td>Male</td>\n      <td>0-14</td>\n    </tr>\n    <tr>\n      <th>2012-01-01</th>\n      <td>WEST BENGAL</td>\n      <td>Professional_Profile</td>\n      <td>Service (Government)</td>\n      <td>Male</td>\n      <td>15-29</td>\n    </tr>\n    <tr>\n      <th>2012-01-01</th>\n      <td>WEST BENGAL</td>\n      <td>Professional_Profile</td>\n      <td>Service (Government)</td>\n      <td>Male</td>\n      <td>60+</td>\n    </tr>\n    <tr>\n      <th>2012-01-01</th>\n      <td>WEST BENGAL</td>\n      <td>Social_Status</td>\n      <td>Never Married</td>\n      <td>Male</td>\n      <td>0-100+</td>\n    </tr>\n  </tbody>\n</table>\n<p>237519 rows Ã— 5 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# List all the columns in the dataset\ncolumns_list = suicide_data.columns\n\n# Print the list of column names\nprint(columns_list)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:52:05.28979Z","iopub.execute_input":"2024-04-18T20:52:05.290371Z","iopub.status.idle":"2024-04-18T20:52:05.295655Z","shell.execute_reply.started":"2024-04-18T20:52:05.290341Z","shell.execute_reply":"2024-04-18T20:52:05.29445Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Index(['State', 'Type_code', 'Type', 'Gender', 'Age_group'], dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"# Check for missing values in each column\nmissing_values_count = suicide_data.isnull().sum()\n\n# Print the count of missing values for each column\nprint(missing_values_count)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:52:08.456236Z","iopub.execute_input":"2024-04-18T20:52:08.456673Z","iopub.status.idle":"2024-04-18T20:52:08.553232Z","shell.execute_reply.started":"2024-04-18T20:52:08.456638Z","shell.execute_reply":"2024-04-18T20:52:08.551941Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"State        0\nType_code    0\nType         0\nGender       0\nAge_group    0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"# Display counts for each item under categorical features\nprint(\"Counts for Items Under Each Categorical Feature:\")\ncategorical_features = suicide_data.select_dtypes(include=['object']).columns\nfor feature in categorical_features:\n    print(f\"--- Counts for {feature} ---\")\n    print(suicide_data[feature].value_counts())\n    print(\"\\n\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:52:11.7065Z","iopub.execute_input":"2024-04-18T20:52:11.707077Z","iopub.status.idle":"2024-04-18T20:52:11.815119Z","shell.execute_reply.started":"2024-04-18T20:52:11.707047Z","shell.execute_reply":"2024-04-18T20:52:11.814021Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Counts for Items Under Each Categorical Feature:\n--- Counts for State ---\nState\nMADHYA PRADESH       6792\nMAHARASHTRA          6792\nKARNATAKA            6792\nODISHA               6791\nANDHRA PRADESH       6791\nRAJASTHAN            6791\nBIHAR                6790\nCHHATTISGARH         6790\nHARYANA              6790\nKERALA               6788\nUTTAR PRADESH        6787\nASSAM                6786\nTAMIL NADU           6786\nGUJARAT              6786\nJHARKHAND            6785\nTRIPURA              6782\nDELHI (UT)           6782\nWEST BENGAL          6780\nPUNJAB               6779\nHIMACHAL PRADESH     6774\nJAMMU & KASHMIR      6761\nGOA                  6759\nUTTARAKHAND          6758\nSIKKIM               6742\nMIZORAM              6737\nMEGHALAYA            6733\nPUDUCHERRY           6730\nCHANDIGARH           6717\nA & N ISLANDS        6712\nDAMAN & DIU          6710\nARUNACHAL PRADESH    6707\nNAGALAND             6705\nD & N HAVELI         6704\nMANIPUR              6700\nLAKSHADWEEP          6674\nTOTAL (ALL INDIA)     312\nTOTAL (STATES)        312\nTOTAL (UTs)           312\nName: count, dtype: int64\n\n\n--- Counts for Type_code ---\nType_code\nCauses                  109200\nMeans_adopted            67200\nProfessional_Profile     49263\nEducation_Status          7296\nSocial_Status             4560\nName: count, dtype: int64\n\n\n--- Counts for Type ---\nType\nOthers (Please Specify)                           7263\nCancer                                            4200\nOther Causes (Please Specity)                     4200\nFailure in Examination                            4200\nFamily Problems                                   4200\n                                                  ... \nNever Married                                      912\nGraduate                                           912\nNot having Children (Barrenness/Impotency          350\nBy Other means                                     350\nBankruptcy or Sudden change in Economic Status     350\nName: count, Length: 69, dtype: int64\n\n\n--- Counts for Gender ---\nGender\nMale      118879\nFemale    118640\nName: count, dtype: int64\n\n\n--- Counts for Age_group ---\nAge_group\n15-29     45223\n30-44     45193\n45-59     45146\n60+       45074\n0-14      45027\n0-100+    11856\nName: count, dtype: int64\n\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# Aggregate the data by year and count the number of entries for each year\nyearly_trend = suicide_data.groupby('Year').size()\n\n# Plotting the trend\nplt.figure(figsize=(10, 6))\nyearly_trend.plot(kind='line', marker='o', color='b')\nplt.title('Trend of Suicide Cases in India (2001-2012)')\nplt.xlabel('Year')\nplt.ylabel('Number of Cases')\nplt.grid(True)\n\n# Save the plot to a file\nplt.savefig('/mnt/data/suicide_trend_india_2001_2012_plot.png')\n\n# Show the plot in the notebook\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:52:16.331727Z","iopub.execute_input":"2024-04-18T20:52:16.332186Z","iopub.status.idle":"2024-04-18T20:52:16.809244Z","shell.execute_reply.started":"2024-04-18T20:52:16.332157Z","shell.execute_reply":"2024-04-18T20:52:16.807625Z"},"trusted":true},"execution_count":19,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[19], line 13\u001b[0m\n\u001b[1;32m     10\u001b[0m plt\u001b[38;5;241m.\u001b[39mgrid(\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m     12\u001b[0m \u001b[38;5;66;03m# Save the plot to a file\u001b[39;00m\n\u001b[0;32m---> 13\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msavefig\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m/mnt/data/suicide_trend_india_2001_2012_plot.png\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;66;03m# Show the plot in the notebook\u001b[39;00m\n\u001b[1;32m     16\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/matplotlib/pyplot.py:1023\u001b[0m, in \u001b[0;36msavefig\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1020\u001b[0m \u001b[38;5;129m@_copy_docstring_and_deprecators\u001b[39m(Figure\u001b[38;5;241m.\u001b[39msavefig)\n\u001b[1;32m   1021\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msavefig\u001b[39m(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m   1022\u001b[0m     fig \u001b[38;5;241m=\u001b[39m gcf()\n\u001b[0;32m-> 1023\u001b[0m     res \u001b[38;5;241m=\u001b[39m \u001b[43mfig\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msavefig\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1024\u001b[0m     fig\u001b[38;5;241m.\u001b[39mcanvas\u001b[38;5;241m.\u001b[39mdraw_idle()  \u001b[38;5;66;03m# Need this if 'transparent=True', to reset colors.\u001b[39;00m\n\u001b[1;32m   1025\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m res\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/matplotlib/figure.py:3378\u001b[0m, in \u001b[0;36mFigure.savefig\u001b[0;34m(self, fname, transparent, **kwargs)\u001b[0m\n\u001b[1;32m   3374\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m ax \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes:\n\u001b[1;32m   3375\u001b[0m         stack\u001b[38;5;241m.\u001b[39menter_context(\n\u001b[1;32m   3376\u001b[0m             ax\u001b[38;5;241m.\u001b[39mpatch\u001b[38;5;241m.\u001b[39m_cm_set(facecolor\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnone\u001b[39m\u001b[38;5;124m'\u001b[39m, edgecolor\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnone\u001b[39m\u001b[38;5;124m'\u001b[39m))\n\u001b[0;32m-> 3378\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcanvas\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mprint_figure\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/matplotlib/backend_bases.py:2366\u001b[0m, in \u001b[0;36mFigureCanvasBase.print_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[1;32m   2362\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   2363\u001b[0m     \u001b[38;5;66;03m# _get_renderer may change the figure dpi (as vector formats\u001b[39;00m\n\u001b[1;32m   2364\u001b[0m     \u001b[38;5;66;03m# force the figure dpi to 72), so we need to set it again here.\u001b[39;00m\n\u001b[1;32m   2365\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m cbook\u001b[38;5;241m.\u001b[39m_setattr_cm(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfigure, dpi\u001b[38;5;241m=\u001b[39mdpi):\n\u001b[0;32m-> 2366\u001b[0m         result \u001b[38;5;241m=\u001b[39m \u001b[43mprint_method\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2367\u001b[0m \u001b[43m            \u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2368\u001b[0m \u001b[43m            \u001b[49m\u001b[43mfacecolor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfacecolor\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2369\u001b[0m \u001b[43m            \u001b[49m\u001b[43medgecolor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43medgecolor\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2370\u001b[0m \u001b[43m            \u001b[49m\u001b[43morientation\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43morientation\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2371\u001b[0m \u001b[43m            \u001b[49m\u001b[43mbbox_inches_restore\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m_bbox_inches_restore\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2372\u001b[0m \u001b[43m            \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2373\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m   2374\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m bbox_inches \u001b[38;5;129;01mand\u001b[39;00m restore_bbox:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/matplotlib/backend_bases.py:2232\u001b[0m, in \u001b[0;36mFigureCanvasBase._switch_canvas_and_return_print_method.<locals>.<lambda>\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   2228\u001b[0m     optional_kws \u001b[38;5;241m=\u001b[39m {  \u001b[38;5;66;03m# Passed by print_figure for other renderers.\u001b[39;00m\n\u001b[1;32m   2229\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdpi\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfacecolor\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124medgecolor\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124morientation\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   2230\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbbox_inches_restore\u001b[39m\u001b[38;5;124m\"\u001b[39m}\n\u001b[1;32m   2231\u001b[0m     skip \u001b[38;5;241m=\u001b[39m optional_kws \u001b[38;5;241m-\u001b[39m {\u001b[38;5;241m*\u001b[39minspect\u001b[38;5;241m.\u001b[39msignature(meth)\u001b[38;5;241m.\u001b[39mparameters}\n\u001b[0;32m-> 2232\u001b[0m     print_method \u001b[38;5;241m=\u001b[39m functools\u001b[38;5;241m.\u001b[39mwraps(meth)(\u001b[38;5;28;01mlambda\u001b[39;00m \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs: \u001b[43mmeth\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2233\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m{\u001b[49m\u001b[43mk\u001b[49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mv\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mk\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mv\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mitems\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mk\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mskip\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m   2234\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:  \u001b[38;5;66;03m# Let third-parties do as they see fit.\u001b[39;00m\n\u001b[1;32m   2235\u001b[0m     print_method \u001b[38;5;241m=\u001b[39m meth\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/matplotlib/backends/backend_agg.py:509\u001b[0m, in \u001b[0;36mFigureCanvasAgg.print_png\u001b[0;34m(self, filename_or_obj, metadata, pil_kwargs)\u001b[0m\n\u001b[1;32m    462\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mprint_png\u001b[39m(\u001b[38;5;28mself\u001b[39m, filename_or_obj, \u001b[38;5;241m*\u001b[39m, metadata\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, pil_kwargs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m    463\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    464\u001b[0m \u001b[38;5;124;03m    Write the figure to a PNG file.\u001b[39;00m\n\u001b[1;32m    465\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    507\u001b[0m \u001b[38;5;124;03m        *metadata*, including the default 'Software' key.\u001b[39;00m\n\u001b[1;32m    508\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 509\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_print_pil\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mpng\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpil_kwargs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmetadata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/matplotlib/backends/backend_agg.py:458\u001b[0m, in \u001b[0;36mFigureCanvasAgg._print_pil\u001b[0;34m(self, filename_or_obj, fmt, pil_kwargs, metadata)\u001b[0m\n\u001b[1;32m    453\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    454\u001b[0m \u001b[38;5;124;03mDraw the canvas, then save it using `.image.imsave` (to which\u001b[39;00m\n\u001b[1;32m    455\u001b[0m \u001b[38;5;124;03m*pil_kwargs* and *metadata* are forwarded).\u001b[39;00m\n\u001b[1;32m    456\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    457\u001b[0m FigureCanvasAgg\u001b[38;5;241m.\u001b[39mdraw(\u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m--> 458\u001b[0m \u001b[43mmpl\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mimage\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mimsave\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    459\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbuffer_rgba\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mformat\u001b[39;49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfmt\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43morigin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mupper\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    460\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdpi\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfigure\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdpi\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmetadata\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmetadata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpil_kwargs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpil_kwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/matplotlib/image.py:1689\u001b[0m, in \u001b[0;36mimsave\u001b[0;34m(fname, arr, vmin, vmax, cmap, format, origin, dpi, metadata, pil_kwargs)\u001b[0m\n\u001b[1;32m   1687\u001b[0m pil_kwargs\u001b[38;5;241m.\u001b[39msetdefault(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mformat\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mformat\u001b[39m)\n\u001b[1;32m   1688\u001b[0m pil_kwargs\u001b[38;5;241m.\u001b[39msetdefault(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdpi\u001b[39m\u001b[38;5;124m\"\u001b[39m, (dpi, dpi))\n\u001b[0;32m-> 1689\u001b[0m \u001b[43mimage\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msave\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mpil_kwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/PIL/Image.py:2429\u001b[0m, in \u001b[0;36mImage.save\u001b[0;34m(self, fp, format, **params)\u001b[0m\n\u001b[1;32m   2427\u001b[0m         fp \u001b[38;5;241m=\u001b[39m builtins\u001b[38;5;241m.\u001b[39mopen(filename, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mr+b\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   2428\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 2429\u001b[0m         fp \u001b[38;5;241m=\u001b[39m \u001b[43mbuiltins\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mw+b\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2431\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   2432\u001b[0m     save_handler(\u001b[38;5;28mself\u001b[39m, fp, filename)\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/mnt/data/suicide_trend_india_2001_2012_plot.png'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/mnt/data/suicide_trend_india_2001_2012_plot.png'","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#Performing a Chi-square test for the association between 'Type_code' and 'Gender'\n# First, create a contingency table for these variables\ncontingency_gender = pd.crosstab(suicide_data['Type_code'], suicide_data['Gender'])\n\n# Perform the Chi-square test\nchi2_gender, p_gender, dof_gender, expected_gender = chi2_contingency(contingency_gender)\n\n# Display the results for 'Type_code' and 'Gender'\nprint(\"Chi-square test between Type_code and Gender\")\nprint(f\"Chi2 Statistic: {chi2_gender}, p-value: {p_gender}\\n\")\n\n# Example: Performing a Chi-square test for the association between 'Type_code' and 'Age_group'\n# Creating a contingency table for these variables\ncontingency_age = pd.crosstab(suicide_data['Type_code'], suicide_data['Age_group'])\n\n# Perform the Chi-square test\nchi2_age, p_age, dof_age, expected_age = chi2_contingency(contingency_age)\n\n# Display the results for 'Type_code' and 'Age_group'\nprint(\"Chi-square test between Type_code and Age_group\")\nprint(f\"Chi2 Statistic: {chi2_age}, p-value: {p_age}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:53:07.822177Z","iopub.execute_input":"2024-04-18T20:53:07.822994Z","iopub.status.idle":"2024-04-18T20:53:07.98313Z","shell.execute_reply.started":"2024-04-18T20:53:07.82296Z","shell.execute_reply":"2024-04-18T20:53:07.982212Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Chi-square test between Type_code and Gender\nChi2 Statistic: 0.9190218910674361, p-value: 0.921816098414428\n\nChi-square test between Type_code and Age_group\nChi2 Statistic: 237521.2208440001, p-value: 0.0\n","output_type":"stream"}]}]}